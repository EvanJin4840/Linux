# File Upload Vulnerability

## 1. What is File Upload Vulnerability?
A security flaw where a web application allows users to upload files **without proper validation**, enabling an attacker to upload malicious files (e.g., web shells, executables) that can be **executed on the server**.

---

## 2. How It Happens
1. **Poor file extension validation** – allowing `.php`, `.jsp`, `.asp` instead of only safe types like `.jpg`, `.png`.
2. **MIME type-only validation** – trusting `Content-Type` sent by the client (can be easily modified).
3. **No content inspection** – not checking the actual file data.
4. **Insecure upload location** – storing files in a web-accessible directory where executable extensions can run.

---

## 3. Common Attack Scenario
**PHP Web Shell Upload**
1. Create a malicious PHP file:
   ```php
2. Upload it to the target application.
3. Access it in the browser:http:
//target/uploads/shell.php?cmd=whoami
4. Execute arbitrary system commands remotely.

## 4. Common Bypass Techniques
- Double extensions: image.jpg.php
- Uppercase/lowercase: image.PHP
- Null byte injection: image.php%00.jpg (older systems)
- MIME type spoofing: Change Content-Type to image/jpeg using Burp Suite.
- Image + code injection: Insert PHP code after a valid image header.
- Alternate executable extensions: .phtml, .php5, .php7, etc.
# File Upload Vulnerability

## 1. What is File Upload Vulnerability?
A security flaw where a web application allows users to upload files **without proper validation**, enabling an attacker to upload malicious files (e.g., web shells, executables) that can be **executed on the server**.

---

## 2. How It Happens
1. **Poor file extension validation** – allowing `.php`, `.jsp`, `.asp` instead of only safe types like `.jpg`, `.png`.
2. **MIME type-only validation** – trusting `Content-Type` sent by the client (can be easily modified).
3. **No content inspection** – not checking the actual file data.
4. **Insecure upload location** – storing files in a web-accessible directory where executable extensions can run.

---

## 3. Common Attack Scenario
**PHP Web Shell Upload**
1. Create a malicious PHP file:
   ```php
   <?php system($_GET['cmd']);?>
2. Upload it to the target application.
3. Access it in the browser:
ttp://target/uploads/shell.php?cmd=whoami
4. Execute arbitrary system commands remotely.

## 4. Common Bypass Techniques
- Double extensions: image.jpg.php
- Uppercase/lowercase: image.PHP
- Null byte injection: image.php%00.jpg (older systems)
- MIME type spoofing: Change Content-Type to image/jpeg using Burp Suite.
- Image + code injection: Insert PHP code after a valid image header.
- Alternate executable extensions: .phtml, .php5, .php7, etc.

### what is CGI(Common Gateway Interface)?
- Definition: CGI is a standard interface that lets a web server execute external programs (scripts/binaries) to generate dynamic content.
- How it works
1. Client requests URL → server maps to a CGI program.
2. Server passes metadata via env vars and the body via STDIN.
3. Program writes headers + blank line + body to STDOUT.
4. Server relays that output back to the client.

#### FastCGI
#### Magic Bytes
